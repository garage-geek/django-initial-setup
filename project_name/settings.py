"""
Django settings for project_name project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from decouple import Csv
from decouple import config
from corsheaders.defaults import default_headers
from dj_database_url import parse as dburl
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

APPEND_SLASH = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())

SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)

# Application definition

INSTALLED_APPS = [
    'project_name.core.apps.CoreConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

EXTRA_APPS = [
    'test_without_migrations',
    'widget_tweaks',
    'django_extensions',
    'storages',
]

PROJECT_APPS = []

INSTALLED_APPS += EXTRA_APPS
INSTALLED_APPS += PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project_name.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_name.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

default_dburl = 'sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3')

DATABASES = {
    'default': config('DATABASE_URL', default=default_dburl, cast=dburl),
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization

LANGUAGE_CODE = config('LANGUAGE_CODE', default='pt-BR')

TIME_ZONE = config('TIME_ZONE', default='America/Sao_Paulo')

USE_I18N = config('USE_I18N', default=True)

USE_L10N = config('USE_L10N', default=True)

USE_TZ = config('USE_TZ', default=False)

USE_THOUSAND_SEPARATOR = config('USE_THOUSAND_SEPARATOR', default=True)

DECIMAL_SEPARATOR = config('DECIMAL_SEPARATOR', default=',')

THOUSAND_SEPARATOR = config('THOUSAND_SEPARATOR', default='.')

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

LANGUAGES = [
    ('pt-br', _('Brazilian Portuguese')),
]

# Static files (CSS, JavaScript, Images)

AWS_QUERYSTRING_AUTH = True

AWS_DEFAULT_ACL = 'private'

AWS_BUCKET_ACL = 'private'

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')

AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')

AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')

STATIC_URL = '/static/'

STATIC_ROOT = config('STATIC_ROOT', default=os.path.join(BASE_DIR, 'staticfiles'))

STATIC_AWS_BUCKET = config('STATIC_AWS_BUCKET', default='')

STATICFILES_STORAGE = config('STATICFILES_STORAGE', default='django.contrib.staticfiles.storage.StaticFilesStorage')

MEDIA_URL = config('MEDIA_URL', default='/media/')

MEDIA_AWS_BUCKET = config('MEDIA_AWS_BUCKET', default='')

DEFAULT_FILE_STORAGE = config('DEFAULT_FILE_STORAGE', default='django.core.files.storage.FileSystemStorage')

if DEFAULT_FILE_STORAGE == 'django.core.files.storage.FileSystemStorage':
    MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'project_name/media'))

# Email configuration

EMAIL_BACKEND = config('EMAIL_BACKEND', default='')

EMAIL_HOST = config('EMAIL_HOST', default='')

EMAIL_PORT = config('EMAIL_PORT', cast=int, default=25)

EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default='')

EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')

EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='')

SERVER_EMAIL = config('SERVER_EMAIL', default='')

# REST Framework Configuration

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'project_name.api.auth.TokenAuthenticate',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'project_name.api.auth.IsUserAuthenticated',
    ),
    'NON_FIELD_ERRORS_KEY': '__all__',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# 30 days
EXPIRES_IN = 60*60*24*30

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = default_headers + ()
